{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/YacineF14/first-project/blob/main/TP2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "print(\"Bibliothques importes avec succs \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h4E_Cg7tErt8",
        "outputId": "bff596b4-ceda-4b67-b3ae-af33133eae1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bibliothques importes avec succs \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Dimensions :\", df.shape)\n",
        "print(\"Colonnes :\", df.columns.tolist())\n",
        "df.describe()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "otuR6xdvEZy_",
        "outputId": "639983c4-bade-4710-9a29-3f6e02d71364"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dimensions : (19999, 785)\n",
            "Colonnes : ['6', '0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '0.10', '0.11', '0.12', '0.13', '0.14', '0.15', '0.16', '0.17', '0.18', '0.19', '0.20', '0.21', '0.22', '0.23', '0.24', '0.25', '0.26', '0.27', '0.28', '0.29', '0.30', '0.31', '0.32', '0.33', '0.34', '0.35', '0.36', '0.37', '0.38', '0.39', '0.40', '0.41', '0.42', '0.43', '0.44', '0.45', '0.46', '0.47', '0.48', '0.49', '0.50', '0.51', '0.52', '0.53', '0.54', '0.55', '0.56', '0.57', '0.58', '0.59', '0.60', '0.61', '0.62', '0.63', '0.64', '0.65', '0.66', '0.67', '0.68', '0.69', '0.70', '0.71', '0.72', '0.73', '0.74', '0.75', '0.76', '0.77', '0.78', '0.79', '0.80', '0.81', '0.82', '0.83', '0.84', '0.85', '0.86', '0.87', '0.88', '0.89', '0.90', '0.91', '0.92', '0.93', '0.94', '0.95', '0.96', '0.97', '0.98', '0.99', '0.100', '0.101', '0.102', '0.103', '0.104', '0.105', '0.106', '0.107', '0.108', '0.109', '0.110', '0.111', '0.112', '0.113', '0.114', '0.115', '0.116', '0.117', '0.118', '0.119', '0.120', '0.121', '24', '67', '67.1', '18', '0.122', '0.123', '0.124', '0.125', '0.126', '0.127', '0.128', '0.129', '0.130', '0.131', '0.132', '0.133', '0.134', '0.135', '0.136', '0.137', '0.138', '0.139', '0.140', '0.141', '0.142', '0.143', '0.144', '0.145', '131', '252', '252.1', '66', '0.146', '0.147', '0.148', '0.149', '0.150', '0.151', '0.152', '0.153', '0.154', '0.155', '0.156', '0.157', '0.158', '0.159', '0.160', '0.161', '0.162', '0.163', '0.164', '0.165', '0.166', '0.167', '0.168', '159', '250', '232', '30', '32', '0.169', '0.170', '0.171', '0.172', '0.173', '0.174', '0.175', '0.176', '0.177', '0.178', '0.179', '0.180', '0.181', '0.182', '0.183', '0.184', '0.185', '0.186', '0.187', '0.188', '0.189', '0.190', '15', '222', '252.2', '108', '0.191', '0.192', '0.193', '0.194', '0.195', '0.196', '0.197', '0.198', '0.199', '0.200', '0.201', '0.202', '0.203', '0.204', '0.205', '0.206', '0.207', '0.208', '0.209', '0.210', '0.211', '0.212', '0.213', '0.214', '147', '252.3', '183', '5', '0.215', '0.216', '0.217', '0.218', '0.219', '0.220', '0.221', '20', '89', '89.1', '73', '0.222', '0.223', '0.224', '0.225', '0.226', '0.227', '0.228', '0.229', '0.230', '0.231', '0.232', '0.233', '48', '247', '252.4', '159.1', '0.234', '0.235', '0.236', '0.237', '0.238', '0.239', '0.240', '79', '236', '252.5', '252.6', '249', '198', '16', '0.241', '0.242', '0.243', '0.244', '0.245', '0.246', '0.247', '0.248', '0.249', '41', '193', '252.7', '199', '22', '0.250', '0.251', '0.252', '0.253', '0.254', '12', '135', '248', '252.8', '252.9', '252.10', '252.11', '252.12', '100', '0.255', '0.256', '0.257', '0.258', '0.259', '0.260', '0.261', '0.262', '0.263', '100.1', '252.13', '252.14', '88', '0.264', '0.265', '0.266', '0.267', '0.268', '11', '171', '252.15', '252.16', '235', '175', '178', '252.17', '252.18', '224', '0.269', '0.270', '0.271', '0.272', '0.273', '0.274', '0.275', '0.276', '15.1', '209', '252.19', '233', '12.1', '0.277', '0.278', '0.279', '0.280', '49', '177', '252.20', '252.21', '89.2', '26', '0.281', '2', '166', '252.22', '252.23', '0.282', '0.283', '0.284', '0.285', '0.286', '0.287', '0.288', '0.289', '96', '253', '253.1', '59', '0.290', '0.291', '0.292', '0.293', '11.1', '177.1', '255', '253.2', '92', '0.294', '0.295', '0.296', '0.297', '155', '253.3', '128', '0.298', '0.299', '0.300', '0.301', '0.302', '0.303', '0.304', '0.305', '143', '252.24', '252.25', '10', '0.306', '0.307', '0.308', '12.2', '171.1', '252.26', '216', '110', '13', '0.309', '0.310', '0.311', '3', '180', '232.1', '24.1', '0.312', '0.313', '0.314', '0.315', '0.316', '0.317', '0.318', '0.319', '143.1', '252.27', '170', '2.1', '0.320', '0.321', '0.322', '135.1', '252.28', '209.1', '19', '0.323', '0.324', '0.325', '0.326', '0.327', '12.3', '252.29', '132', '0.328', '0.329', '0.330', '0.331', '0.332', '0.333', '0.334', '0.335', '0.336', '249.1', '252.30', '96.1', '0.337', '0.338', '0.339', '21', '248.1', '246', '34', '0.340', '0.341', '0.342', '0.343', '5.1', '61', '234', '152', '3.1', '0.344', '0.345', '0.346', '0.347', '0.348', '0.349', '0.350', '0.351', '0.352', '253.4', '252.31', '44', '0.353', '0.354', '0.355', '145', '252.32', '104', '0.356', '0.357', '0.358', '46', '114', '184', '252.33', '149', '34.1', '0.359', '0.360', '0.361', '0.362', '0.363', '0.364', '0.365', '0.366', '0.367', '0.368', '253.5', '252.34', '82', '0.369', '0.370', '31', '239', '252.35', '66.1', '39', '89.3', '165', '243', '252.36', '233.1', '126', '5.2', '0.371', '0.372', '0.373', '0.374', '0.375', '0.376', '0.377', '0.378', '0.379', '0.380', '0.381', '249.2', '252.37', '244', '126.1', '98', '143.2', '252.38', '252.39', '237', '240', '253.6', '252.40', '243.1', '174', '17', '0.382', '0.383', '0.384', '0.385', '0.386', '0.387', '0.388', '0.389', '0.390', '0.391', '0.392', '0.393', '0.394', '119', '239.1', '252.41', '252.42', '252.43', '252.44', '252.45', '252.46', '252.47', '252.48', '228', '179', '17.1', '0.395', '0.396', '0.397', '0.398', '0.399', '0.400', '0.401', '0.402', '0.403', '0.404', '0.405', '0.406', '0.407', '0.408', '0.409', '0.410', '46.1', '66.2', '66.3', '66.4', '66.5', '66.6', '66.7', '66.8', '66.9', '29', '0.411', '0.412', '0.413', '0.414', '0.415', '0.416', '0.417', '0.418', '0.419', '0.420', '0.421', '0.422', '0.423', '0.424', '0.425', '0.426', '0.427', '0.428', '0.429', '0.430', '0.431', '0.432', '0.433', '0.434', '0.435', '0.436', '0.437', '0.438', '0.439', '0.440', '0.441', '0.442', '0.443', '0.444', '0.445', '0.446', '0.447', '0.448', '0.449', '0.450', '0.451', '0.452', '0.453', '0.454', '0.455', '0.456', '0.457', '0.458', '0.459', '0.460', '0.461', '0.462', '0.463', '0.464', '0.465', '0.466', '0.467', '0.468', '0.469', '0.470', '0.471', '0.472', '0.473', '0.474', '0.475', '0.476', '0.477', '0.478', '0.479', '0.480', '0.481', '0.482', '0.483', '0.484', '0.485', '0.486', '0.487', '0.488', '0.489', '0.490', '0.491', '0.492', '0.493', '0.494', '0.495', '0.496', '0.497', '0.498', '0.499', '0.500', '0.501', '0.502', '0.503', '0.504', '0.505', '0.506', '0.507', '0.508', '0.509', '0.510', '0.511', '0.512', '0.513', '0.514', '0.515', '0.516', '0.517', '0.518', '0.519', '0.520', '0.521', '0.522', '0.523', '0.524', '0.525', '0.526', '0.527', '0.528', '0.529', '0.530', '0.531', '0.532', '0.533', '0.534', '0.535', '0.536', '0.537', '0.538', '0.539', '0.540', '0.541', '0.542', '0.543', '0.544', '0.545', '0.546', '0.547', '0.548', '0.549', '0.550', '0.551', '0.552', '0.553', '0.554', '0.555', '0.556', '0.557', '0.558', '0.559', '0.560', '0.561', '0.562', '0.563', '0.564', '0.565', '0.566', '0.567', '0.568', '0.569', '0.570', '0.571', '0.572', '0.573', '0.574', '0.575', '0.576', '0.577', '0.578', '0.579', '0.580', '0.581', '0.582', '0.583', '0.584', '0.585', '0.586', '0.587', '0.588', '0.589', '0.590']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  6        0      0.1      0.2      0.3      0.4      0.5  \\\n",
              "count  19999.000000  19999.0  19999.0  19999.0  19999.0  19999.0  19999.0   \n",
              "mean       4.470124      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "std        2.892807      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "min        0.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "25%        2.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "50%        4.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "75%        7.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "max        9.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "\n",
              "           0.6      0.7      0.8  ...         0.581         0.582  \\\n",
              "count  19999.0  19999.0  19999.0  ...  19999.000000  19999.000000   \n",
              "mean       0.0      0.0      0.0  ...      0.215011      0.087704   \n",
              "std        0.0      0.0      0.0  ...      6.314821      3.921664   \n",
              "min        0.0      0.0      0.0  ...      0.000000      0.000000   \n",
              "25%        0.0      0.0      0.0  ...      0.000000      0.000000   \n",
              "50%        0.0      0.0      0.0  ...      0.000000      0.000000   \n",
              "75%        0.0      0.0      0.0  ...      0.000000      0.000000   \n",
              "max        0.0      0.0      0.0  ...    253.000000    254.000000   \n",
              "\n",
              "              0.583         0.584         0.585         0.586    0.587  \\\n",
              "count  19999.000000  19999.000000  19999.000000  19999.000000  19999.0   \n",
              "mean       0.036502      0.013651      0.032602      0.006000      0.0   \n",
              "std        2.712527      0.950818      2.718102      0.600333      0.0   \n",
              "min        0.000000      0.000000      0.000000      0.000000      0.0   \n",
              "25%        0.000000      0.000000      0.000000      0.000000      0.0   \n",
              "50%        0.000000      0.000000      0.000000      0.000000      0.0   \n",
              "75%        0.000000      0.000000      0.000000      0.000000      0.0   \n",
              "max      253.000000     79.000000    254.000000     62.000000      0.0   \n",
              "\n",
              "         0.588    0.589    0.590  \n",
              "count  19999.0  19999.0  19999.0  \n",
              "mean       0.0      0.0      0.0  \n",
              "std        0.0      0.0      0.0  \n",
              "min        0.0      0.0      0.0  \n",
              "25%        0.0      0.0      0.0  \n",
              "50%        0.0      0.0      0.0  \n",
              "75%        0.0      0.0      0.0  \n",
              "max        0.0      0.0      0.0  \n",
              "\n",
              "[8 rows x 785 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9085f0b2-693c-46f9-94c6-01eed0a7c00f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>6</th>\n",
              "      <th>0</th>\n",
              "      <th>0.1</th>\n",
              "      <th>0.2</th>\n",
              "      <th>0.3</th>\n",
              "      <th>0.4</th>\n",
              "      <th>0.5</th>\n",
              "      <th>0.6</th>\n",
              "      <th>0.7</th>\n",
              "      <th>0.8</th>\n",
              "      <th>...</th>\n",
              "      <th>0.581</th>\n",
              "      <th>0.582</th>\n",
              "      <th>0.583</th>\n",
              "      <th>0.584</th>\n",
              "      <th>0.585</th>\n",
              "      <th>0.586</th>\n",
              "      <th>0.587</th>\n",
              "      <th>0.588</th>\n",
              "      <th>0.589</th>\n",
              "      <th>0.590</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>19999.000000</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>...</td>\n",
              "      <td>19999.000000</td>\n",
              "      <td>19999.000000</td>\n",
              "      <td>19999.000000</td>\n",
              "      <td>19999.000000</td>\n",
              "      <td>19999.000000</td>\n",
              "      <td>19999.000000</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "      <td>19999.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>4.470124</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.215011</td>\n",
              "      <td>0.087704</td>\n",
              "      <td>0.036502</td>\n",
              "      <td>0.013651</td>\n",
              "      <td>0.032602</td>\n",
              "      <td>0.006000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.892807</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>6.314821</td>\n",
              "      <td>3.921664</td>\n",
              "      <td>2.712527</td>\n",
              "      <td>0.950818</td>\n",
              "      <td>2.718102</td>\n",
              "      <td>0.600333</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>253.000000</td>\n",
              "      <td>254.000000</td>\n",
              "      <td>253.000000</td>\n",
              "      <td>79.000000</td>\n",
              "      <td>254.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 785 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9085f0b2-693c-46f9-94c6-01eed0a7c00f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9085f0b2-693c-46f9-94c6-01eed0a7c00f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9085f0b2-693c-46f9-94c6-01eed0a7c00f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ba496b65-c5e6-415c-afd7-de4fbe8030d4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ba496b65-c5e6-415c-afd7-de4fbe8030d4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ba496b65-c5e6-415c-afd7-de4fbe8030d4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# عرض بعض المعلومات العامة\n",
        "print(\"Dimensions :\", df.shape)\n",
        "print(\"Colonnes :\", df.columns.tolist())\n",
        "\n",
        "desc = df.describe()\n",
        "\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.heatmap(desc, annot=True, cmap='coolwarm', fmt='.2f')\n",
        "plt.title(\"Heatmap des statistiques descriptives\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "QSzBRO-RPAFc",
        "outputId": "c24f0a44-0835-4bbd-b504-9bd6f32fbc3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dimensions : (7, 2)\n",
            "Colonnes : ['Taille', 'Poids']\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "lm6LGiBfE3-M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5d7bb689"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load sample data into a DataFrame named df\n",
        "df = pd.read_csv('/content/sample_data/mnist_train_small.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(df['6'], bins=15)\n",
        "plt.title(\"Histogramme de la longueur des spales\")\n",
        "plt.xlabel(\"Longueur\")\n",
        "plt.ylabel(\"Frquence\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "4mfBIgdYFBV_",
        "outputId": "f47c3527-f1f4-486f-c22f-ca9beb1daf2c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score"
      ],
      "metadata": {
        "id": "UD2cYUIpFnfq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('/content/sample_data/mnist_train_small.csv')\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.histplot(df['6'], bins=15, fill=True)\n",
        "plt.title(\"Heatmap du nombre d'occurrences de la longueur des sépales\")\n",
        "plt.xlabel(\"Longueur\")\n",
        "plt.ylabel(\"Fréquence\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 790
        },
        "id": "qan_VPPePi6T",
        "outputId": "c40d6407-c0ad-45cf-82da-8df39bc912e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "Rectangle.set() got an unexpected keyword argument 'cmap'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3506936808.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'6'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'mako'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Heatmap du nombre d'occurrences de la longueur des sépales\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Longueur\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/seaborn/distributions.py\u001b[0m in \u001b[0;36mhistplot\u001b[0;34m(data, x, y, hue, weights, stat, bins, binwidth, binrange, discrete, cumulative, common_bins, common_norm, multiple, element, fill, shrink, kde, kde_kws, line_kws, thresh, pthresh, pmax, cbar, cbar_ax, cbar_kws, palette, hue_order, hue_norm, color, log_scale, legend, ax, **kwargs)\u001b[0m\n\u001b[1;32m   1394\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1395\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1396\u001b[0;31m         \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_default_color\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1397\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1398\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhas_xy_data\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/seaborn/utils.py\u001b[0m in \u001b[0;36m_default_color\u001b[0;34m(method, hue, color, kws, saturation)\u001b[0m\n\u001b[1;32m    125\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m         \u001b[0;31m# bar() needs masked, not empty data, to generate a patch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m         \u001b[0mscout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m         \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_rgb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_facecolor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m         \u001b[0mscout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1519\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1520\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1521\u001b[0;31m             return func(\n\u001b[0m\u001b[1;32m   1522\u001b[0m                 \u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1523\u001b[0m                 \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mbar\u001b[0;34m(self, x, height, width, bottom, align, **kwargs)\u001b[0m\n\u001b[1;32m   2641\u001b[0m                 \u001b[0mhatch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhtch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2642\u001b[0m                 )\n\u001b[0;32m-> 2643\u001b[0;31m             \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_internal_update\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2644\u001b[0m             \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interpolation_steps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0morientation\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'vertical'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_internal_update\u001b[0;34m(self, kwargs)\u001b[0m\n\u001b[1;32m   1231\u001b[0m         \u001b[0mThe\u001b[0m \u001b[0mlack\u001b[0m \u001b[0mof\u001b[0m \u001b[0mprenormalization\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mto\u001b[0m \u001b[0mmaintain\u001b[0m \u001b[0mbackcompatibility\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1232\u001b[0m         \"\"\"\n\u001b[0;32m-> 1233\u001b[0;31m         return self._update_props(\n\u001b[0m\u001b[1;32m   1234\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"{cls.__name__}.set() got an unexpected keyword argument \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1235\u001b[0m             \"{prop_name!r}\")\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_update_props\u001b[0;34m(self, props, errfmt)\u001b[0m\n\u001b[1;32m   1204\u001b[0m                     \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"set_{k}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1205\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1206\u001b[0;31m                         raise AttributeError(\n\u001b[0m\u001b[1;32m   1207\u001b[0m                             \u001b[0merrfmt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprop_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1208\u001b[0m                             name=k)\n",
            "\u001b[0;31mAttributeError\u001b[0m: Rectangle.set() got an unexpected keyword argument 'cmap'"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "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t7c3iouLD1iTy+Uil8vlszUAAI4wed1RLS4ujlmzZkVLS8vAWH9/f7S0tER1dfWQa84///x4+eWXo7+/f2DspZdeiilTpgwZqQAAEDGMX/3X19fH2rVr46c//Wls3749vvGNb0R3d3csWrQoIiIWLFgQy5YtG5j/jW98I/7+97/HDTfcEC+99FJs2LAhVq5cGYsXLx65VwEAwBEn7+9Rrauriz179sSKFSuivb09Zs6cGc3NzQMfsNq1a1cUFv63fysrK+Opp56KJUuWxFlnnRXTpk2LG264IW688caRexUAABxx8v4e1cPB96gCAKTtsH+PKgAAjBWhCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoQqAABJEqoAACRJqAIAkCShCgBAkoYVqk1NTTF9+vQoKSmJqqqq2Lx58yGtW7duXRQUFMS8efOGc1kAAMaRvEN1/fr1UV9fHw0NDbF169aYMWNG1NbWxptvvvm+61577bX49re/HRdeeOGwNwsAwPiRd6jec889cfXVV8eiRYviM5/5TKxZsyaOOeaYeOihhw66pq+vL7761a/GrbfeGieffPIH2jAAAONDXqHa29sbW7ZsiZqamv8+QWFh1NTURGtr60HXff/734/JkyfHlVdeeUjX6enpia6urkEPAADGl7xCde/evdHX1xfl5eWDxsvLy6O9vX3INc8880w8+OCDsXbt2kO+TmNjY5SVlQ08Kisr89kmAABHgFH91P++ffti/vz5sXbt2pg0adIhr1u2bFl0dnYOPHbv3j2KuwQAIEUT8pk8adKkKCoqio6OjkHjHR0dUVFRccD8V155JV577bWYO3fuwFh/f/9/LjxhQrz44otxyimnHLAul8tFLpfLZ2sAABxh8rqjWlxcHLNmzYqWlpaBsf7+/mhpaYnq6uoD5p922mnx/PPPR1tb28Djsssui4svvjja2tr8Sh8AgIPK645qRER9fX0sXLgwZs+eHXPmzInVq1dHd3d3LFq0KCIiFixYENOmTYvGxsYoKSmJM844Y9D6448/PiLigHEAAPj/8g7Vurq62LNnT6xYsSLa29tj5syZ0dzcPPABq127dkVhob/wCgCAD6Ygy7LscG/if+nq6oqysrLo7OyM0tLSw70dAADeYzR6za1PAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEiSUAUAIElCFQCAJAlVAACSJFQBAEjSsEK1qakppk+fHiUlJVFVVRWbN28+6Ny1a9fGhRdeGBMnToyJEydGTU3N+84HAICIYYTq+vXro76+PhoaGmLr1q0xY8aMqK2tjTfffHPI+Zs2bYrLL788fve730Vra2tUVlbGF77whXjjjTc+8OYBADhyFWRZluWzoKqqKs4999y47777IiKiv78/Kisr4/rrr4+lS5f+z/V9fX0xceLEuO+++2LBggWHdM2urq4oKyuLzs7OKC0tzWe7AACMgdHotbzuqPb29saWLVuipqbmv09QWBg1NTXR2tp6SM/x9ttvxzvvvBMnnHDCQef09PREV1fXoAcAAONLXqG6d+/e6Ovri/Ly8kHj5eXl0d7efkjPceONN8bUqVMHxe57NTY2RllZ2cCj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k6+NGzdmy5cvzx5//PEsIrInnnjifefv3LkzO+aYY7L6+vrshRdeyO69996sqKgoa25uzuu6SYTqnDlzssWLFw/8ua+vL5s6dWrW2Ng45Pwvf/nL2aWXXjporKqqKvv6178+qvtkZOR73u+1f//+7Ljjjst++tOfjtYWGUHDOe/9+/dn5513XvbjH/84W7hwoVD9EMn3vH/0ox9lJ598ctbb2ztWW2QE5Xveixcvzj73uc8NGquvr8/OP//8Ud0nI+tQQvW73/1udvrppw8aq6ury2pra/O61mH/1X9vb29s2bIlampqBsYKCwujpqYmWltbh1zT2to6aH5ERG1t7UHnk47hnPd7vf322/HOO+/ECSecMFrbZIQM97y///3vx+TJk+PKK68ci20yQoZz3r/85S+juro6Fi9eHOXl5XHGGWfEypUro6+vb6y2zTAN57zPO++82LJly8DbA3bu3BkbN26MSy65ZEz2zNgZqVbL+2+mGml79+6Nvr6+gb/Z6l3l5eWxY8eOIde0t7cPOb+9vX3U9snIGM55v9eNN94YU6dOPeAHgPQM57yfeeaZePDBB6OtrW0MdshIGs5579y5M37729/GV7/61di4cWO8/PLLcd1118U777wTDQ0NY7Fthmk4533FFVfE3r1744ILLogsy2L//v1x7bXXxk033TQWW2YMHazVurq64l//+lccffTRh/Q8h/2OKuRj1apVsW7dunjiiSeipKTkcG+HEbZv376YP39+rF27NiZNmnS4t8MY6O/vj8mTJ8cDDzwQs2bNirq6uli+fHmsWbPmcG+NUbBp06ZYuXJl3H///bF169Z4/PHHY8OGDXHbbbcd7q2RqMN+R3XSpElRVFQUHR0dg8Y7OjqioqJiyDUVFRV5zScdwznvd911112xatWq+M1vfhNnnXXWaG6TEZLveb/yyivx2muvxdy5cwfG+vv7IyJiwoQJ8eKLL8Ypp5wyuptm2Ibz8z1lypQ46qijoqioaGDs05/+dLS3t0dvb28UFxeP6p4ZvuGc9y233BLz58+Pq666KiIizjzzzOju7o5rrrkmli9fHoWF7p8dKQ7WaqWlpYd8NzUigTuqxcXFMWvWrGhpaRkY6+/vj5aWlqiurh5yTXV19aD5ERFPP/30QeeTjuGcd0TEnXfeGbfddls0NzfH7Nmzx2KrjIB8z/u0006L559/Ptra2gYel112WVx88cXR1tYWlZWVY7l98jScn+/zzz8/Xn755YF/IYmIeOmll2LKlCkiNXHDOe+33377gBh9919S/vMZHY4UI9Zq+X3Oa3SsW7cuy+Vy2cMPP5y98MIL2TXXXJMdf/zxWXt7e5ZlWTZ//vxs6dKlA/P/8Ic/ZBMmTMjuuuuubPv27VlDQ4Ovp/oQyfe8V61alRUXF2ePPfZY9te//nXgsW/fvsP1EshDvuf9Xj71/+GS73nv2rUrO+6447JvfvOb2Ysvvpj96le/yiZPnpzdfvvth+slkId8z7uhoSE77rjjsp/97GfZzp07s1//+tfZKaeckn35y18+XC+BQ7Rv375s27Zt2bZt27KIyO65555s27Zt2euvv55lWZYtXbo0mz9//sD8d7+e6jvf+U62ffv2rKmp6cP79VRZlmX33ntvduKJJ2bFxcXZnDlzsj/+8Y8D/9lFF12ULVy4cND8n//859mpp56aFRcXZ6effnq2YcOGMd4xH0Q+533SSSdlEXHAo6GhYew3zrDk+/P9/wnVD598z/vZZ5/Nqqqqslwul5188snZHXfcke3fv3+Md81w5XPe77zzTva9730vO+WUU7KSkpKssrIyu+6667J//OMfY79x8vK73/1uyP8vfvd8Fy5cmF100UUHrJk5c2ZWXFycnXzyydlPfvKTvK9bkGXutQMAkJ7D/h5VAAAYilAFACBJQhUAgCQJVQAAkiRUAQBIklAFACBJQhUAgCQJVQAAkiRUAQBIklAFACBJQhUAgCQJVQAAkvR/kB9t1Nd2bicAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('/content/sample_data/mnist_train_small.csv')\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.histplot(df['6'], bins=15, fill=True)\n",
        "plt.title(\"Heatmap du nombre d'occurrences de la longueur des sépales\")\n",
        "plt.xlabel(\"Longueur\")\n",
        "plt.ylabel(\"Fréquence\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 790
        },
        "id": "shCHCfQsPnnX",
        "outputId": "aaab9415-adc3-4713-9ff4-4985d23971ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "Rectangle.set() got an unexpected keyword argument 'cmap'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3506936808.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'6'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'mako'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Heatmap du nombre d'occurrences de la longueur des sépales\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Longueur\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/seaborn/distributions.py\u001b[0m in \u001b[0;36mhistplot\u001b[0;34m(data, x, y, hue, weights, stat, bins, binwidth, binrange, discrete, cumulative, common_bins, common_norm, multiple, element, fill, shrink, kde, kde_kws, line_kws, thresh, pthresh, pmax, cbar, cbar_ax, cbar_kws, palette, hue_order, hue_norm, color, log_scale, legend, ax, **kwargs)\u001b[0m\n\u001b[1;32m   1394\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1395\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1396\u001b[0;31m         \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_default_color\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1397\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1398\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhas_xy_data\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/seaborn/utils.py\u001b[0m in \u001b[0;36m_default_color\u001b[0;34m(method, hue, color, kws, saturation)\u001b[0m\n\u001b[1;32m    125\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m         \u001b[0;31m# bar() needs masked, not empty data, to generate a patch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m         \u001b[0mscout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m         \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_rgb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_facecolor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m         \u001b[0mscout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1519\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1520\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1521\u001b[0;31m             return func(\n\u001b[0m\u001b[1;32m   1522\u001b[0m                 \u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1523\u001b[0m                 \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mbar\u001b[0;34m(self, x, height, width, bottom, align, **kwargs)\u001b[0m\n\u001b[1;32m   2641\u001b[0m                 \u001b[0mhatch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhtch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2642\u001b[0m                 )\n\u001b[0;32m-> 2643\u001b[0;31m             \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_internal_update\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2644\u001b[0m             \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interpolation_steps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0morientation\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'vertical'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_internal_update\u001b[0;34m(self, kwargs)\u001b[0m\n\u001b[1;32m   1231\u001b[0m         \u001b[0mThe\u001b[0m \u001b[0mlack\u001b[0m \u001b[0mof\u001b[0m \u001b[0mprenormalization\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mto\u001b[0m \u001b[0mmaintain\u001b[0m \u001b[0mbackcompatibility\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1232\u001b[0m         \"\"\"\n\u001b[0;32m-> 1233\u001b[0;31m         return self._update_props(\n\u001b[0m\u001b[1;32m   1234\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"{cls.__name__}.set() got an unexpected keyword argument \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1235\u001b[0m             \"{prop_name!r}\")\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_update_props\u001b[0;34m(self, props, errfmt)\u001b[0m\n\u001b[1;32m   1204\u001b[0m                     \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"set_{k}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1205\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1206\u001b[0;31m                         raise AttributeError(\n\u001b[0m\u001b[1;32m   1207\u001b[0m                             \u001b[0merrfmt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprop_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1208\u001b[0m                             name=k)\n",
            "\u001b[0;31mAttributeError\u001b[0m: Rectangle.set() got an unexpected keyword argument 'cmap'"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "url = \"https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv\"\n",
        "df = pd.read_csv(url)\n",
        "\n",
        "\n",
        "print(df.head())\n",
        "\n",
        "corr = df.corr(numeric_only=True)\n",
        "\n",
        "\n",
        "plt.figure(figsize=(8,6))\n",
        "sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f')\n",
        "plt.title(\"Heatmap des corrélations entre les variables de l'Iris dataset\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 649
        },
        "id": "QC1DIcRBQHTW",
        "outputId": "4f3925fb-5a35-4f77-b6bb-7c474dc4b7d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   sepal_length  sepal_width  petal_length  petal_width species\n",
            "0           5.1          3.5           1.4          0.2  setosa\n",
            "1           4.9          3.0           1.4          0.2  setosa\n",
            "2           4.7          3.2           1.3          0.2  setosa\n",
            "3           4.6          3.1           1.5          0.2  setosa\n",
            "4           5.0          3.6           1.4          0.2  setosa\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(\"MSE :\", mse)\n",
        "print(\"R :\", r2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MddhEYXKQO8P",
        "outputId": "130740b3-5401-4074-a7a7-f10dd561d1ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE : 58.25\n",
            "R : -8.32\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data={\n",
        "      ’Taille’ : [150, 160, 165, 170, 175, 180, 185],\n",
        "’Poids’ : [ 50, 55, 60, 65, 70, 80, 85]\n",
        "4 }\n",
        "df = pd.DataFrame(data)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "5LF0kRVcGuHe",
        "outputId": "c37a206e-6a32-49d8-91f4-fd1d4cac3bc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid character '’' (U+2019) (ipython-input-3657617621.py, line 2)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-3657617621.py\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    ’Taille’ : [150, 160, 165, 170, 175, 180, 185],\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character '’' (U+2019)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "36286698",
        "outputId": "79211deb-6e2a-4123-81c5-b5fa95ad5c1b"
      },
      "source": [
        "# Assuming '6' is the column used in the histogram\n",
        "# We will create a 2D histogram for visualization as a heatmap.\n",
        "# For a single variable histogram, we need to create a second variable for the 2D histogram.\n",
        "# We can use a dummy variable or the index for this purpose. Let's use the index.\n",
        "\n",
        "# Create a 2D histogram\n",
        "hist, xedges, yedges = np.histogram2d(df.index, df['6'], bins=(50, 50))\n",
        "\n",
        "# Plot the 2D histogram as a heatmap\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.imshow(hist.T, origin='lower', extent=[xedges[0], xedges[-1], yedges[0], yedges[-1]], cmap='viridis', aspect='auto')\n",
        "plt.colorbar(label='Frequency')\n",
        "plt.title(\"2D Histogram Heatmap of '6'\")\n",
        "plt.xlabel(\"Index\")\n",
        "plt.ylabel(\"Value of '6'\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxoAAAK9CAYAAACjLhqwAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAaQZJREFUeJzt3Xl4FFXWx/FfZw8k6UBYQljCvoMoCuICiCgiIgojqDgsMq4oKOg46CjuAR13ER0HwQ0RHAGdURBQQAUUEFBE9l02BZJAICGk7/sHb3psEyE3VLqS9PfzPPVAV5+ue6tS6e6Tc2+VxxhjBAAAAAAOCnO7AwAAAADKHxINAAAAAI4j0QAAAADgOBINAAAAAI4j0QAAAADgOBINAAAAAI4j0QAAAADgOBINAAAAAI4j0QAAAADgOBINACVi69at8ng8mjRpkttdAU5p1qxZatOmjWJiYuTxeJSenu52lwCgzCPRAMqgpUuX6o477lCLFi1UsWJF1alTR3379tX69esLxHbu3Fkej0cej0dhYWFKSEhQkyZN9Oc//1lz5swpcpuDBg1SXFzcHz7v8Xh0xx13FGt/fuuVV14J+eQkP0n7xz/+UejzDz/8sDwej3799dcS68OaNWv08MMPa+vWrSXWRmmxf/9+9e3bV7GxsRo3bpzefvttVaxYsdDYSZMmyePxFFjv8/k0fvx4tWnTRrGxsUpKSlKXLl20atUqf8z8+fPl8XhC4pgCgCRFuN0BAPbGjh2rr7/+Wtdcc41at26tPXv26OWXX9ZZZ52lJUuWqGXLlgHxtWrVUlpamiQpKytLGzdu1Icffqh33nlHffv21TvvvKPIyEhH+5iamqqjR49ab/eVV15RlSpVNGjQIEf7Aztr1qzRI488os6dO6tu3bpud6dELV26VIcOHdJjjz2mrl27FmsbN954o959910NGDBAd9xxh7KysrRixQrt27fP4d4CQNlBogGUQSNGjNDkyZMVFRXlX9evXz+1atVKY8aM0TvvvBMQ7/V6dcMNNwSsGzNmjIYNG6ZXXnlFdevW1dixYx3to8fjUUxMjKPbDIYjR46oQoUKbncDQZSfDCQmJhbr9VOnTtWbb76pDz/8UFdffbWDPQOAso2hU0AZdN555wUkGZLUqFEjtWjRQj/99FORthEeHq4XX3xRzZs318svv6yMjAxH+1jYHI09e/Zo8ODBqlWrlqKjo1WjRg316tXLP5Skbt26+vHHH7VgwQL/cK/OnTv7X79582Zdc801qly5sipUqKBzzz1X//3vfwu0vW3bNl155ZWqWLGiqlWrprvvvluzZ8+Wx+PR/Pnz/XGdO3dWy5YttXz5cnXs2FEVKlTQ/fffL0maOXOmevTooZSUFEVHR6tBgwZ67LHHlJeXF9BW/ja+//57derUSRUqVFDDhg31wQcfSJIWLFig9u3bKzY2Vk2aNNHcuXOdOcCF+Oabb3TZZZfJ6/WqQoUK6tSpk77++usCx+b2229XkyZN/EN8rrnmmoDhPJMmTdI111wjSbrooov8P4v8Y1e3bl1dccUVmj9/vs4++2zFxsaqVatW/uc//PBDtWrVSjExMWrbtq1WrFgR0Ifvv/9egwYNUv369RUTE6Pk5GTdeOON2r9/f0Bc/hCxtWvXqm/fvkpISFBSUpKGDx+u7OzsIh2TadOmqW3btoqNjVWVKlV0ww036Oeff/Y/37lzZw0cOFCSdM4558jj8VhX05599lm1a9dOV199tXw+n7KysqxeDwDlFYkGUE4YY7R3715VqVKlyK8JDw/XddddpyNHjuirr74q0mt+/fXXQpei6NOnj6ZPn67BgwfrlVde0bBhw3To0CFt375dkvT888+rVq1aatq0qd5++229/fbbeuCBByRJe/fu1XnnnafZs2fr9ttv1xNPPKHs7GxdeeWVmj59ur+NrKwsdenSRXPnztWwYcP0wAMPaNGiRbrvvvsK7dP+/fvVvXt3tWnTRs8//7wuuugiSSe+bMfFxWnEiBF64YUX1LZtWz300EP629/+VmAbBw8e1BVXXKH27dvrqaeeUnR0tK699lq9//77uvbaa3X55ZdrzJgxysrK0p/+9CcdOnSoSMfryJEjhR7rI0eOFIj9/PPP1bFjR2VmZmr06NF68sknlZ6eri5duujbb7/1xy1dulSLFi3StddeqxdffFG33nqr5s2bp86dO/u327FjRw0bNkySdP/99/t/Fs2aNfNvZ+PGjbr++uvVs2dPpaWl6eDBg+rZs6feffdd3X333brhhhv0yCOPaNOmTerbt698Pp//tXPmzNHmzZs1ePBgvfTSS7r22ms1ZcoUXX755TLGFNi3vn37Kjs7W2lpabr88sv14osv6uabbz7l8Zs0aZL69u2r8PBwpaWl6aabbtKHH36oCy64wD/Z+4EHHvBv69FHH9Xbb7+tW265pQg/nRMyMzP17bff6pxzztH9998vr9eruLg41a9fX1OnTi3ydgCgXDIAyoW3337bSDITJkwIWN+pUyfTokWLP3zd9OnTjSTzwgsvnHT7AwcONJJOugwdOtQfv2XLFiPJTJw40RhjzMGDB40k8/TTT5+0nRYtWphOnToVWH/XXXcZSebLL7/0rzt06JCpV6+eqVu3rsnLyzPGGPPMM88YSWbGjBn+uKNHj5qmTZsaSeaLL77wr+/UqZORZF599dUC7R05cqTAultuucVUqFDBZGdnF9jG5MmT/evWrl1rJJmwsDCzZMkS//rZs2cHHJM/kn/sTrX88ssvxhhjfD6fadSokenWrZvx+XwB+1CvXj1zySWXnHS/Fi9ebCSZt956y79u2rRpBY5XvtTUVCPJLFq0qMC+xcbGmm3btvnXv/baawW2U1gf3nvvPSPJLFy40L9u9OjRRpK58sorA2Jvv/12I8msWrWqsMNnjDHm2LFjplq1aqZly5bm6NGj/vX/+c9/jCTz0EMP+ddNnDjRSDJLly79w+39ke+++85IMklJSaZ69ermlVdeMe+++65p166d8Xg85tNPP7XeJgCUF1Q0gHJg7dq1Gjp0qDp06OAfBlJU+VeSKspf2WNiYjRnzpxCl1OJjY1VVFSU5s+fr4MHD1r1UZI++eQTtWvXThdccEFA32+++WZt3bpVa9askXTiMqU1a9bUlVdeGdDvm266qdDtRkdHa/DgwYX2N9+hQ4f066+/6sILL9SRI0e0du3agNi4uDhde+21/sdNmjRRYmKimjVrpvbt2/vX5/9/8+bNRdrnm2++udBj/ec//zkgbuXKldqwYYOuv/567d+/31/5yMrK0sUXX6yFCxf6Kwq/3a/c3Fzt379fDRs2VGJior777rsi9UuSmjdvrg4dOhTYty5duqhOnTon3eff9iE7O1u//vqrzj33XEkqtA9Dhw4NeHznnXdKOnFO/JFly5Zp3759uv322wPmCvXo0UNNmzYtdMhdcRw+fFjSicrYzJkzddttt+n666/XvHnzlJSUpMcff9yRdgCgLGIyOFDG7dmzRz169JDX69UHH3yg8PBwq9fnf1GKj48/ZWx4eHixr8oTHR2tsWPHauTIkapevbrOPfdcXXHFFRowYICSk5NP+fpt27YFfGnPlz+cZ9u2bWrZsqW2bdumBg0aFLgEacOGDQvdbs2aNQvMd5GkH3/8UX//+9/1+eefKzMzM+C5389nqVWrVoH2vF6vateuXWCdpCInWo0aNSr0eP9+mNuGDRsk6aRJZkZGhipVqqSjR48qLS1NEydO1M8//xwwVMlmns5vkwnpf/tWlH0+cOCAHnnkEU2ZMqXAVZkK60OjRo0CHjdo0EBhYWEnvUzstm3bJJ1I+n6vadOmRR4qeCr5SVO9evUCzs+4uDj17NlT77zzjo4fP66ICD5uAYQe3vmAMiwjI0Pdu3dXenq6vvzyS6WkpFhvY/Xq1ZL++Iu4k+666y717NlTM2bM0OzZs/Xggw8qLS1Nn3/+uc4888wSb78wv/3rer709HR16tRJCQkJevTRR9WgQQPFxMTou+++03333Rcw30DSHyZ3f7TeFDIP4XTk9+fpp59WmzZtCo3Jr1zdeeedmjhxou666y516NBBXq9XHo9H1157bYH9OpnT2ee+fftq0aJFuvfee9WmTRvFxcXJ5/PpsssuK1IfCruPhVvyf+eqV69e4Llq1aopNzdXWVlZ/oQLAEIJiQZQRmVnZ6tnz55av3695s6dq+bNm1tvIy8vT5MnT1aFChUChiSVpAYNGmjkyJEaOXKkNmzYoDZt2uiZZ57xX5L3j75Epqamat26dQXW5w9jSk1N9f+7Zs0aGWMCtrVx48Yi93H+/Pnav3+/PvzwQ3Xs2NG/fsuWLUXeRjA1aNBAkpSQkHDKitMHH3yggQMH6plnnvGvy87OLnAn7JL6Mn/w4EHNmzdPjzzyiB566CH/+vyqTGE2bNigevXq+R9v3LhRPp/vpPf3yD8f1q1bpy5dugQ8t27dOv/zpyslJUXJyckBV7LKt2vXLsXExBSpWggA5RFzNIAyKC8vT/369dPixYs1bdq0gLHyNtsYNmyYfvrpJw0bNkwJCQkl0NP/OXLkSIFLkjZo0EDx8fHKycnxr6tYsWKBL72SdPnll+vbb7/V4sWL/euysrL0z3/+U3Xr1vUnWt26ddPPP/+sjz76yB+XnZ2t119/vch9zf+r/G//Cn/s2DG98sorRd5GMLVt21YNGjTQP/7xD/9QuN/65Zdf/P8PDw8vUFF56aWXCly2N//O2IX9LE5HYcdWOnHFsT8ybty4gMcvvfSSJKl79+5/+Jqzzz5b1apV06uvvhpwfn366af66aef1KNHD9uu/6F+/fppx44dAXOVfv31V82cOVNdunRRWBgftQBCExUNoAwaOXKkPvroI/Xs2VMHDhwocIO+39+cLyMjwx9z5MgR/53BN23apGuvvVaPPfZYifd5/fr1uvjii9W3b181b95cERERmj59uvbu3Rswkbpt27YaP368Hn/8cTVs2FDVqlVTly5d9Le//U3vvfeeunfvrmHDhqly5cp68803tWXLFv373//2f5m75ZZb9PLLL+u6667T8OHDVaNGDb377rv+CcFF+Uv9eeedp0qVKmngwIEaNmyYPB6P3n77bceHPDklLCxM//rXv9S9e3e1aNFCgwcPVs2aNfXzzz/riy++UEJCgj7++GNJ0hVXXKG3335bXq9XzZs31+LFizV37lwlJSUFbLNNmzYKDw/X2LFjlZGRoejoaHXp0kXVqlU7rb4mJCSoY8eOeuqpp5Sbm6uaNWvqs88+O2m1aMuWLbryyit12WWXafHixXrnnXd0/fXX64wzzvjD10RGRmrs2LEaPHiwOnXqpOuuu0579+7VCy+8oLp16+ruu+8+rf34rVGjRmnq1Knq06ePRowYIa/Xq1dffVW5ubl68sknHWsHAMoc9y54BaC48i+p+kfLyWLj4uJMo0aNzA033GA+++yzIrc5cOBAU7FixT98Xqe4vO2vv/5qhg4dapo2bWoqVqxovF6vad++vZk6dWrAdvbs2WN69Ohh4uPjjaSAS91u2rTJ/OlPfzKJiYkmJibGtGvXzvznP/8p0JfNmzebHj16mNjYWFO1alUzcuRI8+9//9tICrjc7Mku/fv111+bc88918TGxpqUlBTz17/+1X8J199fIrewbaSmppoePXqc8jgVJv/Y/dGlgPMv+5p/edt8K1asML179zZJSUkmOjrapKammr59+5p58+b5Yw4ePGgGDx5sqlSpYuLi4ky3bt3M2rVrTWpqqhk4cGDA9l5//XVTv359Ex4eHrDfNvtW2L7s3LnTXH311SYxMdF4vV5zzTXXmF27dhlJZvTo0QX2c82aNeZPf/qTiY+PN5UqVTJ33HFHwCVrT+b99983Z555pomOjjaVK1c2/fv3Nzt37gyIOZ3L2+bbtGmTufrqq01CQoKJjY01Xbp0Md9++22xtwcA5YHHmFL6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1m0Ek5uXt83MzAxYHx0drejowj83hg4dqh49eqhr1656/PHH/euXL1+u3Nxcde3a1b+uadOmqlOnjhYvXqxzz7X/nXYCFQ0AAADAJbVr15bX6/UvaWlphcZNmTJF3333XaHP79mzR1FRUUpMTAxYX716de3Zs6ckul0k5aKiAQAAABTX6cyZOJ02JWnHjh1KSEjwry+smrFjxw4NHz5cc+bMUUxM0UbxlAZUNAAAAACXJCQkBCyFJRrLly/Xvn37dNZZZykiIkIRERFasGCBXnzxRUVERKh69eo6duyY0tPTA163d+9eJScnB2lPCnI90fj55591ww03KCkpSbGxsWrVqpWWLVvmdrcAAACAUuHiiy/WDz/8oJUrV/qXs88+W/379/f/PzIyUvPmzfO/Zt26ddq+fbs6dOjgWr9dHTp18OBBnX/++brooov06aefqmrVqtqwYUPALHoAAACgJLk5Gbwo4uPj1bJly4B1FStWVFJSkn/9kCFDNGLECFWuXFkJCQm688471aFDB9cmgksuJxpjx45V7dq1NXHiRP+6evXqudgjAAAAoOx57rnnFBYWpj59+ignJ0fdunXTK6+84mqfXE00PvroI3Xr1k3XXHONFixYoJo1a+r222/XTTfdVGh8Tk6OcnJy/I9/fzkwAAAAwJZxYTL46VZQ5s+fH/A4JiZG48aN07hx405ru05ydY7G5s2bNX78eDVq1EizZ8/WbbfdpmHDhunNNwu/JnxaWlrA5b9q164d5B4DAAAAKApXEw2fz6ezzjpLTz75pM4880zdfPPNuummm/Tqq68WGj9q1ChlZGT4lx07dgS5xwAAAACKwtWhUzVq1FDz5oF38m3WrJn+/e/C70B7sjslAgAAAMVhJBkT/DbLO1crGueff77WrVsXsG79+vVKTU11qUcAAAAAnOAxJtj52/8sXbpU5513nh555BH17dtX3377rW666Sb985//VP/+/U/5+szMTHm9XnVWL0V4IoPQYwAAANg4bnI1XzOVkZERcAfs0iD/u+QZH4xUeIXgjprJO5KjVX96plQeF6e4WtE455xzNH36dL333ntq2bKlHnvsMT3//PNFSjIAAAAAlF6uztGQpCuuuEJXXHGF290AAABAiCrtN+wrq1ytaAAAAAAon0g0AAAAADjO9aFTAAAAgJt8xiNPkIcyBftO5G6g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AADKJe6jIUmaOHGipk2bVmD9tGnT9Oabb1pvr8iJRr169VS/fn3/AgAAAKD8SEtLK3BlWenEcKknn3zSentFnqMxadIk640DAAAApZ4bl5sthZe33b59u+rVq1dgfWpqqrZv3269vSInGp06dbLeOAAAAICyoVq1avr+++8LXFVq1apVSkpKst5ekRMNAAAAoFxyY85EKZyjcd1112nYsGGKj49Xx44dJUkLFizQ8OHDde2111pvj0QDAAAAgB577DFt3bpVF198sSIiTqQJPp9PAwYMKNk5GgAAAADKr6ioKL3//vt67LHHtGrVKsXGxqpVq1ZKTU0t1vaKlGh8//33atmypf+ugAAAAEC5wdCpAI0bN1bjxo1PeztFSjTOPPNM7d69W9WqVVP9+vW1dOnSYk0IAQAAAFA65eXladKkSZo3b5727dsnn88X8Pznn39utb0iJRqJiYnasmWLqlWrpq1btxZoFAAAACizqGhIkoYPH65JkyapR48eatmypTye07sEb5ESjT59+qhTp06qUaOGPB6Pzj77bIWHhxcau3nz5tPqEAAAAIDgmzJliqZOnarLL7/cke0VKdH45z//qd69e2vjxo0aNmyYbrrpJsXHxzvSAQAAAADui4qKUsOGDR3bXpGvOnXZZZdJkpYvX67hw4eTaAAAAKB84M7gkqSRI0fqhRde0Msvv3zaw6akYlzeduLEif7/79y5U5JUq1at0+4IAAAAAPd89dVX+uKLL/Tpp5+qRYsWioyMDHj+ww8/tNqedaLh8/n0+OOP65lnntHhw4clSfHx8Ro5cqQeeOABLoELAACAMsVjTizBbrO0SUxM1NVXX+3Y9qwTjQceeEATJkzQmDFjdP7550s6kf08/PDDys7O1hNPPOFY5wAAAIBQN378eI0fP15bt26VJLVo0UIPPfSQunfvLknKzs7WyJEjNWXKFOXk5Khbt2565ZVXVL16dat2fjtyyQnW5Yc333xT//rXv3TbbbepdevWat26tW6//Xa9/vrrmjRpkqOdAwAAAEJdrVq1NGbMGC1fvlzLli1Tly5d1KtXL/3444+SpLvvvlsff/yxpk2bpgULFmjXrl3q3bt3sdo6fvy45s6dq9dee02HDh2SJO3atcs/ksmGdUXjwIEDatq0aYH1TZs21YEDB6w7AAAAALiqlN9Ho2fPngGPn3jiCY0fP15LlixRrVq1NGHCBE2ePFldunSRdKIy0axZMy1ZskTnnntukdvZtm2bLrvsMm3fvl05OTm65JJLFB8fr7FjxyonJ0evvvpq0TutYlQ0zjjjDL388ssF1r/88ss644wzbDcHAAAAhKzMzMyAJScn56TxeXl5mjJlirKystShQwctX75cubm56tq1qz+madOmqlOnjhYvXmzVl+HDh+vss8/WwYMHFRsb619/9dVXa968eXY7pmJUNJ566in16NFDc+fOVYcOHSRJixcv1o4dO/TJJ59YdwAAAAAIVbVr1w54PHr0aD388MMF4n744Qd16NBB2dnZiouL0/Tp09W8eXOtXLlSUVFRSkxMDIivXr269uzZY9WXL7/8UosWLVJUVFTA+rp16+rnn3+22pZUjESjU6dOWr9+vcaNG6e1a9dKknr37q3bb79dKSkp1h0AAAAAQtWOHTuUkJDgfxwdHV1oXJMmTbRy5UplZGTogw8+0MCBA7VgwQJH++Lz+ZSXl1dg/c6dO4t1Dz3rREOSUlJSuLoUAAAAygWPXLi87f//m5CQEJBo/JHf3rW7bdu2Wrp0qV544QX169dPx44dU3p6ekBVY+/evUpOTrbq06WXXqrnn39e//znP0/00ePR4cOHNXr0aF1++eVW25KKMUcDAAAAgLt8Pp9ycnLUtm1bRUZGBsyhWLdunbZv3+6f5lBUzzzzjL7++ms1b95c2dnZuv766/3DpsaOHWvdx2JVNAAAAAAEx6hRo9S9e3fVqVNHhw4d0uTJkzV//nzNnj1bXq9XQ4YM0YgRI1S5cmUlJCTozjvvVIcOHayuOCWduIzuqlWrNGXKFH3//fc6fPiwhgwZov79+wdMDi8qEg0AAACENuM5sQS7zSLat2+fBgwYoN27d8vr9ap169aaPXu2LrnkEknSc889p7CwMPXp0yfghn3FERERoRtuuKFYry2wLUe2AgAAAKBETJgw4aTPx8TEaNy4cRo3btxptfPWW2+d9PkBAwZYba9Yicbx48c1f/58bdq0Sddff73i4+O1a9cuJSQkKC4urjibBAAAANxRym/YFyzDhw8PeJybm6sjR44oKipKFSpUKPlEw+k7BgIAAABw38GDBwus27Bhg2677Tbde++91tuzvuqU03cMBAAAAFA6NWrUSGPGjClQ7SgK64qG03cMBAAAAFzF0KmTioiI0K5du+xfZ/sCp+8YCAAAAMB9H330UcBjY4x2796tl19+Weeff7719qwTDafvGAgAAAC4yWNcuDN4KaxoXHXVVQGPPR6Pqlatqi5duuiZZ56x3p51ovHMM8+oW7duAXcM3LBhg6pUqaL33nvPugMAAAAA3Ofz+RzdnnWi4fQdAwEAAABXMUejRBTrPhpO3jEQAAAAgPtGjBhR5Nhnn332lDHWiYbTdwwEAAAA4L4VK1ZoxYoVys3NVZMmTSRJ69evV3h4uM466yx/nMfjKdL2rBMNp+8YCAAAALiKoVOSpJ49eyo+Pl5vvvmmKlWqJOnETfwGDx6sCy+8UCNHjrTanvUN+w4ePBiwHD58WOvWrdMFF1zAZHAAAACgjHrmmWeUlpbmTzIkqVKlSnr88ceLddUp60SjMKdzx0AAAADATfmXtw32UtpkZmbql19+KbD+l19+0aFDh6y350iiIRX/joEAAAAA3Hf11Vdr8ODB+vDDD7Vz507t3LlT//73vzVkyBD17t3benvWczScvmMgAAAAAPe9+uqruueee3T99dcrNzdX0oliwpAhQ/T0009bb8860XD6joEAAACAq4znxBLsNkuZChUq6JVXXtHTTz+tTZs2SZIaNGigihUrFmt71omG03cMBAAAAFB67N69W7t371bHjh0VGxsrY0yRL2n7W47N0QAAAADKJOPSUsrs379fF198sRo3bqzLL79cu3fvliQNGTLE+tK2UhErGk7fJRAAAABA6XL33XcrMjJS27dvV7Nmzfzr+/XrpxEjRlhPkyhSorFixYoibaw4JRUAAADATW5cbrY0Xt72s88+0+zZs1WrVq2A9Y0aNdK2bdust1ekROOLL76w3jAAAACAsiMrK0sVKlQosP7AgQOKjo623h5zNAAAAADowgsv1FtvveV/7PF45PP59NRTT+miiy6y3p71VackadmyZZo6daq2b9+uY8eOBTz34YcfFmeTAAAAgDvcmJxdCodOPfXUU7r44ou1bNkyHTt2TH/961/1448/6sCBA/r666+tt2edaEyZMkUDBgxQt27d9Nlnn+nSSy/V+vXrtXfvXl199dXWHXDCln+1VliFmCLFVqyYbb39Qz8nWMX/5cL51m3M29fE+jU29mTEW7/myC9210yuUDXLuo1KFY9axf/8c2WreE92uFW8JKU0+MUq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SeaLL74wxnCe5fvkk0/MAw88YD788EMjyUyfPj3g+TFjxhiv12tmzJhhVq1aZa688kpTr149c/ToUX/MZZddZs444wyzZMkS8+WXX5qGDRua6667zv98RkaGqV69uunfv79ZvXq1ee+990xsbKx57bXX/DFff/21CQ8PN0899ZRZs2aN+fvf/24iIyPNDz/8UOLHwNbJjll6errp2rWref/9983atWvN4sWLTbt27Uzbtm0DtpGammoeffTRgPPvt++D5e2YGXPqc23gwIHmsssuCzgmBw4cCIjhXJse8Pxvj9Xu3bvNG2+8YTwej9m0aZM/JhTPNcAJZTbRaNeunRk6dKj/cV5enklJSTFpaWku9sod+/btM5LMggUL/Os6depkhg8f/oev+eSTT0xYWJjZs2ePf9348eNNQkKCycnJMcYY89e//tW0aNEi4HX9+vUz3bp1c3YHgmT06NHmjDPOKPS59PR0ExkZaaZNm+Zf99NPPxlJZvHixcaY0Dxmvzd8+HDToEED4/P5jDGcZ4X5/RcZn89nkpOTzdNPP+1fl56ebqKjo817771njDFmzZo1RpJZunSpP+bTTz81Ho/H/Pzzz8YYY1555RVTqVIl/3Ezxpj77rvPNGnSxP+4b9++pkePHgH9ad++vbnlllsc3UenFfbl7/e+/fZbI8ls27bNvy41NdU899xzf/ia8nzMjCn8uA0cOND06tXrD1/DuXbqc61Xr16mS5cuAetC/VwDiqtMDp06duyYli9frq5du/rXhYWFqWvXrlq8eLGLPXNHRkaGJKly5coB6999911VqVJFLVu21KhRo3TkyBH/c4sXL1arVq0CbvLSrVs3ZWZm6scff/TH/PYY58eU5WO8YcMGpaSkqH79+urfv7+2b98uSVq+fLlyc3MD9rdp06aqU6eOf39D9ZjlO3bsmN555x3deOON8ng8/vWcZye3ZcsW7dmzJ2AfvV6v2rdvH3BuJSYm6uyzz/bHdO3aVWFhYfrmm2/8MR07dlRUVJQ/plu3blq3bp0OHjzojymvxzIjI0Mej0eJiYkB68eMGaOkpCSdeeaZevrppwOG5YXqMZs/f76qVaumJk2a6LbbbtP+/fv9z3GundzevXv13//+V0OGDCnwHOcaYM/1O4MXx6+//qq8vLwCd0KsXr261q5d61Kv3OHz+XTXXXfp/PPPV8uWLf3rr7/+eqWmpiolJUXff/+97rvvPq1bt04ffvihJGnPnj2FHr/8504Wk5mZqaNHjyo2NrYkd81x7du316RJk9SkSRPt3r1bjzzyiC688EKtXr1ae/bsUVRUVIEvMdWrVz/l8ch/7mQxZfWY/daMGTOUnp6uQYMG+ddxnp1a/n4Wto+/PQbVqlULeD4iIkKVK1cOiKlXr16BbeQ/V6lSpT88lvnbKKuys7N133336brrrlNCQoJ//bBhw3TWWWepcuXKWrRokUaNGqXdu3fr2WeflRSax+yyyy5T7969Va9ePW3atEn333+/unfvrsWLFys8PJxz7RTefPNNxcfHq3fv3gHrOdeA4imTiQb+Z+jQoVq9erW++uqrgPU333yz//+tWrVSjRo1dPHFF2vTpk1q0KBBsLtZKnTv3t3//9atW6t9+/ZKTU3V1KlTy/yX2WCYMGGCunfvrpSUFP86zjOUtNzcXPXt21fGGI0fPz7guREjRvj/37p1a0VFRemWW25RWlqaoqOjg93VUuHaa6/1/79Vq1Zq3bq1GjRooPnz5+viiy92sWdlwxtvvKH+/fsrJiYmYD3nGlA8ZXLoVJUqVRQeHl7gikB79+5VcnKyS70KvjvuuEP/+c9/9MUXX6hWrVonjW3fvr0kaePGjZKk5OTkQo9f/nMni0lISCgXX8wTExPVuHFjbdy4UcnJyTp27JjS09MDYn57ToXyMdu2bZvmzp2rv/zlLyeN4zwrKH8/T/Z+lZycrH379gU8f/z4cR04cMCR86+svi/mJxnbtm3TnDlzAqoZhWnfvr2OHz+urVu3SgrNY/Z79evXV5UqVQJ+JznXCvfll19q3bp1p3yfkzjXgKIqk4lGVFSU2rZtq3nz5vnX+Xw+zZs3Tx06dHCxZ8FhjNEdd9yh6dOn6/PPPy9Qri3MypUrJUk1atSQJHXo0EE//PBDwAdO/gd58+bN/TG/Pcb5MeXlGB8+fFibNm1SjRo11LZtW0VGRgbs77p167R9+3b//obyMZs4caKqVaumHj16nDSO86ygevXqKTk5OWAfMzMz9c033wScW+np6Vq+fLk/5vPPP5fP5/Mnbx06dNDChQuVm5vrj5kzZ46aNGmiSpUq+WPKy7HMTzI2bNiguXPnKikp6ZSvWblypcLCwvxDg0LtmBVm586d2r9/f8DvJOda4SZMmKC2bdvqjDPOOGUs5xpQRG7PRi+uKVOmmOjoaDNp0iSzZs0ac/PNN5vExMSAq9uUV7fddpvxer1m/vz5AZfaO3LkiDHGmI0bN5pHH33ULFu2zGzZssXMnDnT1K9f33Ts2NG/jfzLjl566aVm5cqVZtasWaZq1aqFXnb03nvvNT/99JMZN25cmbvs6G+NHDnSzJ8/32zZssV8/fXXpmvXrqZKlSpm3759xpgTl7etU6eO+fzzz82yZctMhw4dTIcOHfyvD8VjZsyJK7rVqVPH3HfffQHrOc/+59ChQ2bFihVmxYoVRpJ59tlnzYoVK/xXSBozZoxJTEw0M2fONN9//73p1atXoZe3PfPMM80333xjvvrqK9OoUaOAS46mp6eb6tWrmz//+c9m9erVZsqUKaZChQoFLp8ZERFh/vGPf5iffvrJjB49utRePvNkx+zYsWPmyiuvNLVq1TIrV64MeJ/Lv6rPokWLzHPPPWdWrlxpNm3aZN555x1TtWpVM2DAAH8b5e2YGXPy43bo0CFzzz33mMWLF5stW7aYuXPnmrPOOss0atTIZGdn+7fBuRb4+2nMicvTVqhQwYwfP77A60P1XAOcUGYTDWOMeemll0ydOnVMVFSUadeunVmyZInbXQoKSYUuEydONMYYs337dtOxY0dTuXJlEx0dbRo2bGjuvffegPsbGGPM1q1bTffu3U1sbKypUqWKGTlypMnNzQ2I+eKLL0ybNm1MVFSUqV+/vr+Nsqhfv36mRo0aJioqytSsWdP069fPbNy40f/80aNHze23324qVapkKlSoYK6++mqze/fugG2E2jEzxpjZs2cbSWbdunUB6znP/ueLL74o9Hdy4MCBxpgTl7h98MEHTfXq1U10dLS5+OKLCxzP/fv3m+uuu87ExcWZhIQEM3jwYHPo0KGAmFWrVpkLLrjAREdHm5o1a5oxY8YU6MvUqVNN48aNTVRUlGnRooX573//W2L7fTpOdsy2bNnyh+9z+fdwWb58uWnfvr3xer0mJibGNGvWzDz55JMBX6iNKV/HzJiTH7cjR46YSy+91FStWtVERkaa1NRUc9NNNxX4AxznWuDvpzHGvPbaayY2Ntakp6cXeH2onmuAEzzGGFOiJRMAAAAAIadMztEAAAAAULqRaAAAAABwHIkGAAAAAMeRaAAAAABwHIkGAAAAAMeRaAAAAABwHIkGAAAAAMeRaAAAAABwHIkGAJQiHo9HM2bMcLsbAACcNhINAHDIoEGDdNVVV7ndDQAASgUSDQAAAACOI9EAgBLQuXNnDRs2TH/9619VuXJlJScn6+GHHw6I2bBhgzp27KiYmBg1b95cc+bMKbCdHTt2qG/fvkpMTFTlypXVq1cvbd26VZK0du1aVahQQZMnT/bHT506VbGxsVqzZk1J7h4AAKdEogEAJeTNN99UxYoV9c033+ipp57So48+6k8mfD6fevfuraioKH3zzTd69dVXdd999wW8Pjc3V926dVN8fLy+/PJLff3114qLi9Nll12mY8eOqWnTpvrHP/6h22+/Xdu3b9fOnTt16623auzYsWrevLkbuwwAgJ/HGGPc7gQAlAeDBg1Senq6ZsyYoc6dOysvL09ffvml//l27dqpS5cuGjNmjD777DP16NFD27ZtU0pKiiRp1qxZ6t69u6ZPn66rrrpK77zzjh5//HH99NNP8ng8kqRjx44pMTFRM2bM0KWXXipJuuKKK5SZmamoqCiFh4dr1qxZ/ngAANwS4XYHAKC8at26dcDjGjVqaN++fZKkn376SbVr1/YnGZLUoUOHgPhVq1Zp48aNio+PD1ifnZ2tTZs2+R+/8cYbaty4scLCwvTjjz+SZAAASgUSDQAoIZGRkQGPPR6PfD5fkV9/+PBhtW3bVu+++26B56pWrer//6pVq5SVlaWwsDDt3r1bNWrUKH6nAQBwCIkGALigWbNm2rFjR0BisGTJkoCYs846S++//76qVaumhISEQrdz4MABDRo0SA888IB2796t/v3767vvvlNsbGyJ7wMAACfDZHAAcEHXrl3VuHFjDRw4UKtWrdKXX36pBx54ICCmf//+qlKlinr16qUvv/xSW7Zs0fz58zVs2DDt3LlTknTrrbeqdu3a+vvf/65nn31WeXl5uueee9zYJQAAApBoAIALwsLCNH36dB09elTt2rXTX/7yFz3xxBMBMRUqVNDChQtVp04d9e7dW82aNdOQIUOUnZ2thIQEvfXWW/rkk0/09ttvKyIiQhUrVtQ777yj119/XZ9++qlLewYAwAlcdQoAAACA46hoAAAAAHAciQYAAAAAx5FoAAAAAHAciQYAAAAAx5FoAAAAAHAciQYAAAAAx5FoAAAAAHAciQYAAAAAx5FoAAAAAHAciQYAAAAAx5FoAAAAAHDc/wHglatVyFNM5AAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = {\n",
        " 'Taille' : [150, 160, 165, 170, 175, 180, 185],\n",
        " 'Poids' : [ 50, 55, 60, 65, 70, 80, 85]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ZVfWVhlWITl4",
        "outputId": "f2c10121-da83-43a2-86d1-b47e737b7aff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Taille  Poids\n",
              "0     150     50\n",
              "1     160     55\n",
              "2     165     60\n",
              "3     170     65\n",
              "4     175     70"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4fdafc8e-4557-4493-9992-cc086b38f5bb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Taille</th>\n",
              "      <th>Poids</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>150</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>160</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>165</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>170</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>175</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4fdafc8e-4557-4493-9992-cc086b38f5bb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4fdafc8e-4557-4493-9992-cc086b38f5bb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4fdafc8e-4557-4493-9992-cc086b38f5bb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-373e4af7-2356-4f67-9c23-49891800527b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-373e4af7-2356-4f67-9c23-49891800527b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-373e4af7-2356-4f67-9c23-49891800527b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Taille\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 150,\n        \"max\": 185,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          150,\n          160,\n          180\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Poids\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 50,\n        \"max\": 85,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          50,\n          55,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "lr2Q_kMvKuwM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = {\n",
        " 'Taille' : [150, 160, 165, 170, 175, 180, 185],\n",
        " 'Poids' : [ 50, 55, 60, 65, 70, 80, 85]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "107c4e68-881f-4f1a-a3c8-de552f7c49bf",
        "collapsed": true,
        "id": "N9aGc7wxKvN3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Taille  Poids\n",
              "0     150     50\n",
              "1     160     55\n",
              "2     165     60\n",
              "3     170     65\n",
              "4     175     70"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fe1d5a2e-274f-4055-94be-f0c6eb7550f1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Taille</th>\n",
              "      <th>Poids</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>150</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>160</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>165</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>170</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>175</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe1d5a2e-274f-4055-94be-f0c6eb7550f1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fe1d5a2e-274f-4055-94be-f0c6eb7550f1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fe1d5a2e-274f-4055-94be-f0c6eb7550f1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-96690520-5fb1-44c7-9b80-e0ad6bed8761\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-96690520-5fb1-44c7-9b80-e0ad6bed8761')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-96690520-5fb1-44c7-9b80-e0ad6bed8761 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Taille\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 150,\n        \"max\": 185,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          150,\n          160,\n          180\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Poids\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 50,\n        \"max\": 85,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          50,\n          55,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = {\n",
        " 'Taille' : [150, 160, 165, 170, 175, 180, 185],\n",
        " 'Poids' : [ 50, 55, 60, 65, 70, 80, 85]\n",
        "}\n",
        "X_train, X_test, y_train, y_test = train_test_split( # التدريب 20 بالمية اختبار و الباقية للتدريب\n",
        "    X, y, test_size=0.2, random_state= Non\n",
        ")\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "df.head()\n",
        "model = LinearRegression() # اختيار النموذج\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test) # prediction"
      ],
      "metadata": {
        "id": "TlJXTnbhMXeb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(X, y, label='Donnes relles')# عرض النتائج ايجاد علاقة بين الوزن و الطول\n",
        "plt.plot(X, model.predict(X), label='Droite de rgression')\n",
        "plt.xlabel('Taille (cm)')\n",
        "plt.ylabel('Poids (kg)')\n",
        "plt.title('Rgression linaire simple')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "qJGsFA9bNGgc",
        "outputId": "d1e4a2b2-28b2-4f81-eeff-da0424c38487"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "FOCSATB9K19k",
        "outputId": "28c4f211-edd3-4eb1-cf1a-91cbf96f85a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "ik9FcyRsLOr8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(\"MSE :\", mse)\n",
        "print(\"R :\", r2)\n"
      ],
      "metadata": {
        "id": "47gLFivrSCwB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1c519545-fb9b-43f1-b7c6-35ac685d1ad8"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE : 58.25\n",
            "R : -8.32\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}